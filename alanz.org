#+TITLE: alanz personal settings
* alanz personal settings

My personal settings

** Startup stuff
blah

#+begin_src emacs-lisp
;;

(starter-kit-install-if-needed 'erlang)
(starter-kit-install-if-needed 'highlight-current-line)

(starter-kit-install-if-needed 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))


(starter-kit-install-if-needed 'markdown-mode)
(autoload 'markdown-mode "markdown-mode"
       "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; org
(starter-kit-install-if-needed 'org)
(starter-kit-load "org")

;; god-mode, see http://chrisdone.com/posts/god-mode
;; https://github.com/chrisdone/god-mode
;; https://github.com/chrisdone/chrisdone-emacs/blob/master/config/god.el
(starter-kit-install-if-needed 'god-mode)
(global-set-key (kbd "C-x C-1") 'delete-other-windows)
(global-set-key (kbd "C-x C-2") 'split-window-below)
(global-set-key (kbd "C-x C-3") 'split-window-right)
(global-set-key (kbd "<escape>") 'god-mode-all)

(defun god-update-cursor ()
  "Update my cursor."
  (setq cursor-type (if (or god-local-mode buffer-read-only)
                        'box
                      'bar)))


;;(defun c/god-mode-update-cursor ()
;;  (let ((limited-colors-p (> 257 (length (defined-colors)))))
;;    (cond (god-local-mode (progn
;;                            (set-face-background 'mode-line (if limited-colors-p "white" "#e9e2cb"))
;;                            (set-face-background 'mode-line-inactive (if limited-colors-p "white" "#e9e2cb"))))
;;          (t (progn
;;               (set-face-background 'mode-line (if limited-colors-p "black" "#0a2832"))
;;               (set-face-background 'mode-line-inactive (if limited-colors-p "black" "#0a2832")))))))


(add-hook 'god-mode-enabled-hook 'god-update-cursor)
(add-hook 'god-mode-disabled-hook 'god-update-cursor)

;; Emacs Code Browser
(starter-kit-install-if-needed 'ecb)
(require 'ecb-autoloads)
(require 'ecb)

;; yaml
(starter-kit-install-if-needed 'yaml-mode)

;; php
(starter-kit-install-if-needed 'php-mode)
(starter-kit-install-if-needed 'flymake-php)

;; smex
(starter-kit-install-if-needed 'smex)
(setq smex-save-file (concat user-emacs-directory ".smex-items"))
(smex-initialize)
(global-set-key (kbd "M-x") 'smex)

;; finding
(starter-kit-install-if-needed `find-file-in-project)
(global-set-key (kbd "C-x f") 'find-file-in-project)

;; projectile
(starter-kit-install-if-needed 'projectile)
(projectile-global-mode)
(setq projectile-enable-caching t)

;;nix
(starter-kit-install-if-needed 'nix-mode)

;; Window number mode
(starter-kit-install-if-needed 'window-number)
(require 'window-number)
(window-number-mode)
(window-number-meta-mode)

;; Remember position in file when re-opening
(require 'saveplace)
(setq save-place-file "~/.emacs.d/saved-places")
(setq-default save-place t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; GHC compiler
;; See https://ghc.haskell.org/trac/ghc/wiki/Emacs

(setq ghc-location "~/mysrc/github/ghc/ghc") ;; change as necessary

;; search withing GHC compiler code
(defun rgrep-ghc (regexp)
  (interactive (list (progn (grep-compute-defaults) (grep-read-regexp))))
  (rgrep regexp "*hs" (concat ghc-location "/compiler/")))
(global-set-key (kbd "M-c") 'rgrep-ghc)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;(add-to-list 'load-path
;    "~/.emacs.d/chrisdone")
;(require 'sunburn)
;(require 'zenburn)
;(zenburn)
;(sunburn)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Haskell Refactorer
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.6.3/HaRe-0.7.1.2/elisp")
(add-to-list 'load-path
    "~/.cabal/share/HaRe-0.7.2.3/elisp")
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.6.3/HaRe-0.7.2.3/elisp")
(add-to-list 'load-path
    "~/.cabal/share/HaRe-0.7.2.0/elisp")
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.6.3/HaRe-0.7.2.0/elisp")
(add-to-list 'load-path
    "~/.cabal.orig/share/HaRe-0.7.1.3/elisp")
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.6.3/HaRe-0.7.2.6/elisp")
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.6.3/HaRe-0.7.2.7/elisp")
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.6.3/HaRe-0.7.2.8/elisp")
(autoload 'hare-init "hare" nil t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; hindent
(add-to-list 'load-path
    "~/.cabal/share/x86_64-linux-ghc-7.8.3/hindent-3.2/elisp")
(require 'hindent)
(define-key haskell-mode-map (kbd "C-c i") 'hindent/reformat-decl)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(starter-kit-install-if-needed 'haskell-mode)
(starter-kit-install-if-needed 'haskell-process)
(starter-kit-install-if-needed 'haskell-simple-indent)
(starter-kit-install-if-needed 'haskell-interactive-mode)
(starter-kit-install-if-needed 'haskell-font-lock)
(starter-kit-install-if-needed 'haskell-debug)
(starter-kit-install-if-needed 'sgml-mode)
(starter-kit-install-if-needed 'css-mode)
(starter-kit-install-if-needed 'evil)


;;(starter-kit-install-if-needed 'haskell-mode)
(starter-kit-install-if-needed 'shm) ;; Structured haskell mode
(starter-kit-install-if-needed 'ghc)
;(starter-kit-install-if-needed 'flymake-haskell-multi)
(autoload 'ghc-init "ghc" nil t)
(autoload 'ghc-debug "ghc" nil t)

;; ghc-mod debugging
(setq ghc-debug t)

(add-hook 'haskell-mode-hook 'run-starter-kit-coding-hook)

(defun alanz-haskell-hook ()

  ;(lambda nil (ghc-init) (flymake-mode))
  (ghc-init)

  ;; No longer required for ghc-mod >= 4.0
  ;; (flymake-mode)

  (hare-init)

  ;; Use simple indentation.
  ;; (turn-on-haskell-simple-indent)
  ;; (add-hook 'haskell-mode-hook 'structured-haskell-mode)

  ;; Load the current file (and make a session if not already made).
  ;;(define-key haskell-mode-map [?\C-c ?\C-l] 'haskell-process-load-file)
  (define-key haskell-mode-map [f5] 'haskell-process-load-file)

  ;; Switch to the REPL.
  (define-key haskell-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch)
  ;; “Bring” the REPL, hiding all other windows apart from the source
  ;; and the REPL.
  ;;(define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)

  ;; Build the Cabal project.
  ;;(define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  ;; Interactively choose the Cabal command to run.
  ;;(define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)

  ;; Get the type and info of the symbol at point, print it in the
  ;; message buffer.
  ;; --++AZ++ no, rather use ghc-mod versions
  ;;(define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
  ;;(define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)

  ;; Contextually do clever things on the space key, in particular:
  ;;   1. Complete imports, letting you choose the module name.
  ;;   2. Show the type of the symbol after the space.
  ;(define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)

  ;; Jump to the imports. Keep tapping to jump between import
  ;; groups. C-u f8 to jump back again.
  (define-key haskell-mode-map [f8] 'haskell-navigate-imports)

  ;; Jump to the definition of the current symbol.
  ;; No, prefer the built in one, and use ghci :etags command
  ;(define-key haskell-mode-map (kbd "M-.") 'haskell-mode-tag-find)

  ;; Indent the below lines on columns after the current column.
  (define-key haskell-mode-map (kbd "C-<right>")
    (lambda ()
      (interactive)
      (haskell-move-nested 1)))
  ;; Same as above but backwards.
  (define-key haskell-mode-map (kbd "C-<left>")
    (lambda ()
      (interactive)
      (haskell-move-nested -1)))


)
(add-hook 'haskell-mode-hook 'alanz-haskell-hook)


;; Useful to have these keybindings for .cabal files, too.
(defun haskell-cabal-hook ()
  (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
  (define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-cabal-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch))
(add-hook 'haskell-cabal-mode-hook 'haskell-cabal-hook)



;(starter-kit-load "haskell")

(display-time)
(set-variable (quote display-time-24hr-format) t)

(menu-bar-mode -1)
(tool-bar-mode -1)
(global-whitespace-mode t)
(column-number-mode t)

;; from the starter-kit-2.0.3 package ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setq visible-bell t
      inhibit-startup-message t
      color-theme-is-global t
      sentence-end-double-space nil
      shift-select-mode nil
      mouse-yank-at-point t
      uniquify-buffer-name-style 'forward
      whitespace-style '(face trailing lines-tail tabs)
      whitespace-line-column 80
      ediff-window-setup-function 'ediff-setup-windows-plain
      oddmuse-directory "~/.emacs.d/oddmuse"
      save-place-file "~/.emacs.d/places"
      backup-directory-alist `(("." . ,(expand-file-name "~/.emacs.d/backups")))
      diff-switches "-u")

(add-to-list 'safe-local-variable-values '(lexical-binding . t))
(add-to-list 'safe-local-variable-values '(whitespace-line-column . 80))

;; Highlight matching parentheses when the point is on them.
(show-paren-mode 1)

(set-default 'indent-tabs-mode nil)
(set-default 'indicate-empty-lines t)
(set-default 'imenu-auto-rescan t)

;;(add-hook 'text-mode-hook 'turn-on-auto-fill)
(add-hook 'text-mode-hook 'turn-off-auto-fill)
(add-hook 'text-mode-hook 'turn-on-flyspell)

(defalias 'yes-or-no-p 'y-or-n-p)
(defalias 'auto-tail-revert-mode 'tail-mode)

(random t) ;; Seed the random-number generator

(setq org-src-fontify-natively t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


#+end_src

